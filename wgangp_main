import  os
import  numpy as np
import  tensorflow as tf
import glob
from    tensorflow import keras
from    scipy.misc import toimage

import xlrd
import xlwt  # 引用写入的库
import xlsxwriter

from    PIL import Image
from    matplotlib import pyplot as plt

from    gan import Generator, Discriminator



def save_result(val_out, val_block_size, image_fn, color_mode):
    def preprocess(img):
        img = ((img + 1.0) * 127.5).astype(np.uint8)
        return img

    preprocesed = preprocess(val_out)
    final_image = np.array([])
    single_row = np.array([])
    for b in range(val_out.shape[0]):
        # concat image into a row
        if single_row.size == 0:
            single_row = preprocesed[b, :, :, :]
        else:
            single_row = np.concatenate((single_row, preprocesed[b, :, :, :]), axis=1)

        # concat image row to final_image
        if (b+1) % val_block_size == 0:
            if final_image.size == 0:
                final_image = single_row
            else:
                final_image = np.concatenate((final_image, single_row), axis=0)

            # reset single row
            single_row = np.array([])

    if final_image.shape[2] == 1:
        final_image = np.squeeze(final_image, axis=2)
    toimage(final_image, mode=color_mode).save(image_fn)


# shorten sigmoid cross entropy loss calculation
def celoss_ones(logits, smooth=0.0):
    return tf.reduce_mean(tf.nn.sigmoid_cross_entropy_with_logits(logits=logits,
                                                                  labels=tf.ones_like(logits)*(1.0 - smooth)))


def celoss_zeros(logits, smooth=0.0):
    return tf.reduce_mean(tf.nn.sigmoid_cross_entropy_with_logits(logits=logits,
                                                                  labels=tf.zeros_like(logits)*(1.0 - smooth)))

def gradient_penalty(discriminator, batch_x, fake_image):

    batchsz = batch_x.shape[0]

    # [b, h, w, c]
    t = tf.random.uniform([batchsz, 1, 1, 1])
    # [b, 1, 1, 1] => [b, h, w, c]
    t = tf.broadcast_to(t, batch_x.shape)

    interplate = t * batch_x + (1 - t) * fake_image

    with tf.GradientTape() as tape:
        tape.watch([interplate])
        d_interplote_logits = discriminator(interplate)
    grads = tape.gradient(d_interplote_logits, interplate)

    # grads:[b, h, w, c] => [b, -1]
    grads = tf.reshape(grads, [grads.shape[0], -1])
    gp = tf.norm(grads, axis=1) #[b]
    gp = tf.reduce_mean( (gp-1)**2 )

    return gp


def d_loss_fn(generator, discriminator, input_noise, real_image, is_trainig):
    fake_image = generator(input_noise, is_trainig)
    d_real_logits = discriminator(real_image, is_trainig)
    d_fake_logits = discriminator(fake_image, is_trainig)

    d_loss_real = celoss_ones(d_real_logits, smooth=0.1)
    d_loss_fake = celoss_zeros(d_fake_logits, smooth=0.0)
    # loss = d_loss_real + d_loss_fake

    gp = gradient_penalty(discriminator, real_image, fake_image)

    loss = d_loss_fake + d_loss_real + 1. * gp

    return loss, gp


def g_loss_fn(generator, discriminator, input_noise, is_trainig):
    fake_image = generator(input_noise, is_trainig)
    d_fake_logits = discriminator(fake_image, is_trainig)
    loss = celoss_ones(d_fake_logits, smooth=0.1)
    return loss





def main():

    tf.random.set_seed(22)
    np.random.seed(22)
    os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'
    assert tf.__version__.startswith('2.')


    # hyper parameters
    z_dim = 100
    epochs = 10000
    batch_size = 100
    learning_rate = 0.02
    is_training = True

    # for validation purpose
    assets_dir = './images'
    if not os.path.isdir(assets_dir):
        os.makedirs(assets_dir)
    val_block_size = 10
    val_size = val_block_size * val_block_size


    # # load mnist data
    # (x_train, _), (x_test, _) = keras.datasets.mnist.load_data()
    # print('x_train.shape:', x_train.shape)
    #
    # x_train = x_train.astype(np.float32) / 255.
    # db = tf.data.Dataset.from_tensor_slices(x_train).shuffle(batch_size*4).batch(batch_size).repeat()
    # db_iter = iter(db)
    # inputs_shape = [-1, 28, 28, 1]

    image_path = glob.glob(r'F:\SOFTWARE\Aticlefive\深度学习与TF-PPT和代码\深度学习与TF-PPT和代码\lesson23-WGANGP0401\original_images\*.png')

    image_counts = len(image_path)
    print(image_counts)

    def load_preprosess_image(path):

        image = tf.io.read_file(path)
        image = tf.image.decode_png(image, channels=1)
        # image = tf.image.resize_with_crop_or_pad(image, 64, 64)
        image = tf.cast(image, tf.float32)
        image = (image / 255.)
        return image

    image_ds = tf.data.Dataset.from_tensor_slices(image_path)

    AUTOTUNE = tf.data.experimental.AUTOTUNE

    image_ds = image_ds.map(load_preprosess_image, num_parallel_calls=AUTOTUNE)

    print('image_ds:', image_ds)

    image_ds = image_ds.shuffle(image_counts).batch(100).repeat()
    print('image_ds', image_ds)

    dataset = image_ds.prefetch(AUTOTUNE)
    print('dataset', dataset)

    db_iter = iter(dataset)
    # inputs_shape = [-1, 28, 28, 1]
    inputs_shape = [-1, 128, 128, 1]

    # create generator & discriminator
    generator = Generator()
    generator.build(input_shape=(batch_size, z_dim))
    generator.summary()
    discriminator = Discriminator()
    discriminator.build(input_shape=(batch_size, 128, 128, 1))
    discriminator.summary()

    # # prepare optimizer
    d_optimizer = keras.optimizers.Adam(learning_rate=learning_rate, beta_1=0.5)
    g_optimizer = keras.optimizers.Adam(learning_rate=learning_rate, beta_1=0.5)
    # d_optimizer = keras.optimizers.SGD(learning_rate=learning_rate)
    # g_optimizer = keras.optimizers.SGD(learning_rate=learning_rate)


    d_loss_total = []
    g_loss_total = []
    gp_loss_total = []

    for epoch in range(epochs):


        # no need labels
        batch_x = next(db_iter)
        # print('batch_x.shape:', batch_x.shape)

        # rescale images to -1 ~ 1
        batch_x = tf.reshape(batch_x, shape=inputs_shape)
        # -1 - 1
        batch_x = batch_x * 2.0 - 1.0

        # Sample random noise for G
        # batch_z = tf.random.uniform(shape=[batch_size, z_dim], minval=-1., maxval=1.)
        batch_z = tf.random.normal(shape=[batch_size, z_dim])
        # val_z = tf.random.normal((val_size, z_dim))

        with tf.GradientTape() as tape:
            d_loss, gp_loss = d_loss_fn(generator, discriminator, batch_z, batch_x, is_training)
        grads = tape.gradient(d_loss, discriminator.trainable_variables)
        for g in grads:
            tf.clip_by_norm(g, 10)
        d_optimizer.apply_gradients(zip(grads, discriminator.trainable_variables))


        with tf.GradientTape() as tape:
            g_loss = g_loss_fn(generator, discriminator, batch_z, is_training)
        grads = tape.gradient(g_loss, generator.trainable_variables)
        for g in grads:
            tf.clip_by_norm(g, 10)
        g_optimizer.apply_gradients(zip(grads, generator.trainable_variables))

        d_loss_total.append(float(d_loss))
        g_loss_total.append(float(g_loss))
        gp_loss_total.append(float(gp_loss))


        if epoch % 100 == 0:

            print(epoch, 'd_loss:', float(d_loss), 'g_loss:', float(g_loss), 'gp_loss:', float(gp_loss))


            # validation results at every epoch
            # val_z = np.random.uniform(-1, 1, size=(val_size, z_dim))
            val_z = tf.random.normal((val_size, z_dim))
            fake_image = generator(val_z, training=False)
            image_fn = os.path.join('images', 'gan-val-{:03d}.png'.format(epoch + 1))
            save_result(fake_image.numpy(), val_block_size, image_fn, color_mode='L')


        if (epoch + 1) % 1 == 0:
            workbook1 = xlwt.Workbook()
            worksheet1 = workbook1.add_sheet("D_loss")  # 新建sheet
            row1, col1 = 0, 0

            # print('kl_div:', float(kl_div))

            stem1 = 0
            for item1, cost1 in enumerate(d_loss_total):
                # print('item1:', stem1, 'cost1', cost1)
                worksheet1.write(row1, col1, stem1)
                worksheet1.write(row1, col1 + 1, np.float(cost1))
                row1 += 1
                stem1 += 1

            workbook1.save(
                r'F:\SOFTWARE\Aticlefive\深度学习与TF-PPT和代码\深度学习与TF-PPT和代码\lesson23-WGANGP0401\Save_Loss\d_loss.xlsx')  # 保存



            workbook2 = xlwt.Workbook()
            worksheet1 = workbook2.add_sheet("G_loss")  # 新建sheet
            row2, col2 = 0, 0

            # print('kl_div:', float(kl_div))

            stem2 = 0
            for item2, cost2 in enumerate(g_loss_total):
                # print('item1:', stem1, 'cost1', cost1)
                worksheet1.write(row2, col2, stem2)
                worksheet1.write(row2, col2 + 1, np.float(cost2))
                row2 += 1
                stem2 += 1

            workbook2.save(
                r'F:\SOFTWARE\Aticlefive\深度学习与TF-PPT和代码\深度学习与TF-PPT和代码\lesson23-WGANGP0401\Save_Loss\g_loss.xlsx')  # 保存



            workbook3 = xlwt.Workbook()
            worksheet1 = workbook3.add_sheet("gp_loss")  # 新建sheet
            row3, col3 = 0, 0

            # print('kl_div:', float(kl_div))

            stem3 = 0
            for item3, cost3 in enumerate(gp_loss_total):
                # print('item1:', stem1, 'cost1', cost1)
                worksheet1.write(row3, col3, stem3)
                worksheet1.write(row3, col3 + 1, np.float(cost3))
                row3 += 1
                stem3 += 1

            workbook3.save(
                r'F:\SOFTWARE\Aticlefive\深度学习与TF-PPT和代码\深度学习与TF-PPT和代码\lesson23-WGANGP0401\Save_Loss\gp_loss.xlsx')  # 保存

    # 保存model
    generator.save_weights(
        r'F:\SOFTWARE\Aticlefive\深度学习与TF-PPT和代码\深度学习与TF-PPT和代码\lesson23-WGANGP0401\Save_Weights\weights.ckpt')
    print('saved weights.')
    # del model_MLP


if __name__ == '__main__':
    main()
